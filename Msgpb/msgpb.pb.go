// Code generated by protoc-gen-go. DO NOT EDIT.
// source: Msgpb/msgpb.proto

package msg

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type EnvioNombre struct {
	MsgType              string   `protobuf:"bytes,1,opt,name=msg_type,json=msgType,proto3" json:"msg_type,omitempty"`
	MsgId                string   `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	MsgMsg               string   `protobuf:"bytes,3,opt,name=msg_msg,json=msgMsg,proto3" json:"msg_msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnvioNombre) Reset()         { *m = EnvioNombre{} }
func (m *EnvioNombre) String() string { return proto.CompactTextString(m) }
func (*EnvioNombre) ProtoMessage()    {}
func (*EnvioNombre) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2a7da461927c517, []int{0}
}

func (m *EnvioNombre) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnvioNombre.Unmarshal(m, b)
}
func (m *EnvioNombre) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnvioNombre.Marshal(b, m, deterministic)
}
func (m *EnvioNombre) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnvioNombre.Merge(m, src)
}
func (m *EnvioNombre) XXX_Size() int {
	return xxx_messageInfo_EnvioNombre.Size(m)
}
func (m *EnvioNombre) XXX_DiscardUnknown() {
	xxx_messageInfo_EnvioNombre.DiscardUnknown(m)
}

var xxx_messageInfo_EnvioNombre proto.InternalMessageInfo

func (m *EnvioNombre) GetMsgType() string {
	if m != nil {
		return m.MsgType
	}
	return ""
}

func (m *EnvioNombre) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *EnvioNombre) GetMsgMsg() string {
	if m != nil {
		return m.MsgMsg
	}
	return ""
}

type ConfSave struct {
	Confirmacion         string   `protobuf:"bytes,1,opt,name=confirmacion,proto3" json:"confirmacion,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfSave) Reset()         { *m = ConfSave{} }
func (m *ConfSave) String() string { return proto.CompactTextString(m) }
func (*ConfSave) ProtoMessage()    {}
func (*ConfSave) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2a7da461927c517, []int{1}
}

func (m *ConfSave) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfSave.Unmarshal(m, b)
}
func (m *ConfSave) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfSave.Marshal(b, m, deterministic)
}
func (m *ConfSave) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfSave.Merge(m, src)
}
func (m *ConfSave) XXX_Size() int {
	return xxx_messageInfo_ConfSave.Size(m)
}
func (m *ConfSave) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfSave.DiscardUnknown(m)
}

var xxx_messageInfo_ConfSave proto.InternalMessageInfo

func (m *ConfSave) GetConfirmacion() string {
	if m != nil {
		return m.Confirmacion
	}
	return ""
}

type Peticion struct {
	Pet                  string   `protobuf:"bytes,1,opt,name=pet,proto3" json:"pet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Peticion) Reset()         { *m = Peticion{} }
func (m *Peticion) String() string { return proto.CompactTextString(m) }
func (*Peticion) ProtoMessage()    {}
func (*Peticion) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2a7da461927c517, []int{2}
}

func (m *Peticion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Peticion.Unmarshal(m, b)
}
func (m *Peticion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Peticion.Marshal(b, m, deterministic)
}
func (m *Peticion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Peticion.Merge(m, src)
}
func (m *Peticion) XXX_Size() int {
	return xxx_messageInfo_Peticion.Size(m)
}
func (m *Peticion) XXX_DiscardUnknown() {
	xxx_messageInfo_Peticion.DiscardUnknown(m)
}

var xxx_messageInfo_Peticion proto.InternalMessageInfo

func (m *Peticion) GetPet() string {
	if m != nil {
		return m.Pet
	}
	return ""
}

func init() {
	proto.RegisterType((*EnvioNombre)(nil), "msg.EnvioNombre")
	proto.RegisterType((*ConfSave)(nil), "msg.ConfSave")
	proto.RegisterType((*Peticion)(nil), "msg.Peticion")
}

func init() { proto.RegisterFile("Msgpb/msgpb.proto", fileDescriptor_f2a7da461927c517) }

var fileDescriptor_f2a7da461927c517 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0xc1, 0x4a, 0xfb, 0x40,
	0x10, 0xc6, 0xc9, 0x3f, 0xfc, 0xd3, 0x38, 0x55, 0xac, 0x03, 0x62, 0x2c, 0x1e, 0x24, 0x07, 0x11,
	0x0f, 0x51, 0xaa, 0x6f, 0xd0, 0x8a, 0xf4, 0xd0, 0x2a, 0xea, 0xc1, 0x5b, 0xd9, 0x34, 0x93, 0x65,
	0x0f, 0xb3, 0x1b, 0x76, 0xd7, 0x42, 0x9f, 0xd1, 0x97, 0x92, 0x8d, 0x51, 0x0c, 0x3d, 0x78, 0x59,
	0x66, 0xbe, 0xf9, 0xcd, 0xf7, 0xb1, 0x0c, 0x1c, 0x2d, 0x9c, 0x6c, 0xca, 0x6b, 0x0e, 0x6f, 0xd1,
	0x58, 0xe3, 0x0d, 0xc6, 0xec, 0x64, 0xfe, 0x06, 0xc3, 0x7b, 0xbd, 0x51, 0x66, 0x69, 0xb8, 0xb4,
	0x84, 0xa7, 0x90, 0xb2, 0x93, 0x2b, 0xbf, 0x6d, 0x28, 0x8b, 0xce, 0xa3, 0xcb, 0xbd, 0xe7, 0x01,
	0x3b, 0xf9, 0xba, 0x6d, 0x08, 0x8f, 0x21, 0x09, 0x23, 0x55, 0x65, 0xff, 0xda, 0xc1, 0x7f, 0x76,
	0x72, 0x5e, 0xe1, 0x09, 0x04, 0x62, 0xc5, 0x4e, 0x66, 0x71, 0xab, 0x07, 0x6a, 0xe1, 0x64, 0x5e,
	0x40, 0x3a, 0x35, 0xba, 0x7e, 0x11, 0x1b, 0xc2, 0x1c, 0xf6, 0xd7, 0x46, 0xd7, 0xca, 0xb2, 0x58,
	0x2b, 0xa3, 0x3b, 0xeb, 0x9e, 0x96, 0x9f, 0x41, 0xfa, 0x44, 0x5e, 0x85, 0x1a, 0x47, 0x10, 0x37,
	0xe4, 0x3b, 0x2c, 0x94, 0x93, 0x8f, 0x08, 0x86, 0x0f, 0xef, 0xc2, 0x56, 0xc2, 0xce, 0x84, 0x37,
	0x78, 0x05, 0x83, 0xae, 0xc5, 0x51, 0xc1, 0x4e, 0x16, 0xbf, 0x7e, 0x31, 0x3e, 0x68, 0x95, 0x9f,
	0xf4, 0x09, 0x1c, 0x3e, 0x96, 0x9e, 0x34, 0xd9, 0xb9, 0xae, 0xcd, 0x4c, 0x78, 0x81, 0x5f, 0xc4,
	0x77, 0xde, 0x78, 0xc7, 0x02, 0xef, 0x7a, 0x3b, 0x4b, 0xc1, 0xf4, 0xe7, 0xce, 0x4d, 0x84, 0x17,
	0x90, 0x4c, 0x15, 0x59, 0xbb, 0x03, 0xf7, 0xdb, 0x32, 0x69, 0x2f, 0x70, 0xfb, 0x19, 0x00, 0x00,
	0xff, 0xff, 0x4b, 0x75, 0xdd, 0xd9, 0x96, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GuardarDatoClient is the client API for GuardarDato service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GuardarDatoClient interface {
	// Se envia de Combine hasta NameNode / Se envia de NameNode hasta DataNode
	Guardar(ctx context.Context, in *EnvioNombre, opts ...grpc.CallOption) (*ConfSave, error)
	//Envia peticion de NameNode hasta DataNode
	ObtenerInfoData(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*EnvioNombre, error)
	//Envia Peticion de Rebelde hasta NameNode , devuelve stream
	ObtenerInfoName(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (GuardarDato_ObtenerInfoNameClient, error)
	//Cierre de los programas
	Cierre(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Peticion, error)
}

type guardarDatoClient struct {
	cc *grpc.ClientConn
}

func NewGuardarDatoClient(cc *grpc.ClientConn) GuardarDatoClient {
	return &guardarDatoClient{cc}
}

func (c *guardarDatoClient) Guardar(ctx context.Context, in *EnvioNombre, opts ...grpc.CallOption) (*ConfSave, error) {
	out := new(ConfSave)
	err := c.cc.Invoke(ctx, "/msg.GuardarDato/Guardar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardarDatoClient) ObtenerInfoData(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*EnvioNombre, error) {
	out := new(EnvioNombre)
	err := c.cc.Invoke(ctx, "/msg.GuardarDato/ObtenerInfoData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guardarDatoClient) ObtenerInfoName(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (GuardarDato_ObtenerInfoNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_GuardarDato_serviceDesc.Streams[0], "/msg.GuardarDato/ObtenerInfoName", opts...)
	if err != nil {
		return nil, err
	}
	x := &guardarDatoObtenerInfoNameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GuardarDato_ObtenerInfoNameClient interface {
	Recv() (*EnvioNombre, error)
	grpc.ClientStream
}

type guardarDatoObtenerInfoNameClient struct {
	grpc.ClientStream
}

func (x *guardarDatoObtenerInfoNameClient) Recv() (*EnvioNombre, error) {
	m := new(EnvioNombre)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *guardarDatoClient) Cierre(ctx context.Context, in *Peticion, opts ...grpc.CallOption) (*Peticion, error) {
	out := new(Peticion)
	err := c.cc.Invoke(ctx, "/msg.GuardarDato/Cierre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GuardarDatoServer is the server API for GuardarDato service.
type GuardarDatoServer interface {
	// Se envia de Combine hasta NameNode / Se envia de NameNode hasta DataNode
	Guardar(context.Context, *EnvioNombre) (*ConfSave, error)
	//Envia peticion de NameNode hasta DataNode
	ObtenerInfoData(context.Context, *Peticion) (*EnvioNombre, error)
	//Envia Peticion de Rebelde hasta NameNode , devuelve stream
	ObtenerInfoName(*Peticion, GuardarDato_ObtenerInfoNameServer) error
	//Cierre de los programas
	Cierre(context.Context, *Peticion) (*Peticion, error)
}

// UnimplementedGuardarDatoServer can be embedded to have forward compatible implementations.
type UnimplementedGuardarDatoServer struct {
}

func (*UnimplementedGuardarDatoServer) Guardar(ctx context.Context, req *EnvioNombre) (*ConfSave, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Guardar not implemented")
}
func (*UnimplementedGuardarDatoServer) ObtenerInfoData(ctx context.Context, req *Peticion) (*EnvioNombre, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerInfoData not implemented")
}
func (*UnimplementedGuardarDatoServer) ObtenerInfoName(req *Peticion, srv GuardarDato_ObtenerInfoNameServer) error {
	return status.Errorf(codes.Unimplemented, "method ObtenerInfoName not implemented")
}
func (*UnimplementedGuardarDatoServer) Cierre(ctx context.Context, req *Peticion) (*Peticion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cierre not implemented")
}

func RegisterGuardarDatoServer(s *grpc.Server, srv GuardarDatoServer) {
	s.RegisterService(&_GuardarDato_serviceDesc, srv)
}

func _GuardarDato_Guardar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnvioNombre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardarDatoServer).Guardar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.GuardarDato/Guardar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardarDatoServer).Guardar(ctx, req.(*EnvioNombre))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardarDato_ObtenerInfoData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardarDatoServer).ObtenerInfoData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.GuardarDato/ObtenerInfoData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardarDatoServer).ObtenerInfoData(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

func _GuardarDato_ObtenerInfoName_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Peticion)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GuardarDatoServer).ObtenerInfoName(m, &guardarDatoObtenerInfoNameServer{stream})
}

type GuardarDato_ObtenerInfoNameServer interface {
	Send(*EnvioNombre) error
	grpc.ServerStream
}

type guardarDatoObtenerInfoNameServer struct {
	grpc.ServerStream
}

func (x *guardarDatoObtenerInfoNameServer) Send(m *EnvioNombre) error {
	return x.ServerStream.SendMsg(m)
}

func _GuardarDato_Cierre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Peticion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GuardarDatoServer).Cierre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.GuardarDato/Cierre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GuardarDatoServer).Cierre(ctx, req.(*Peticion))
	}
	return interceptor(ctx, in, info, handler)
}

var _GuardarDato_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.GuardarDato",
	HandlerType: (*GuardarDatoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Guardar",
			Handler:    _GuardarDato_Guardar_Handler,
		},
		{
			MethodName: "ObtenerInfoData",
			Handler:    _GuardarDato_ObtenerInfoData_Handler,
		},
		{
			MethodName: "Cierre",
			Handler:    _GuardarDato_Cierre_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObtenerInfoName",
			Handler:       _GuardarDato_ObtenerInfoName_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "Msgpb/msgpb.proto",
}
